
  /* Autogenerated. Don't touch! */

  export const pageSchema = {
  type: "document",
  name: "page",
  groups: [
    { name: "content", title: "Content", default: true },
    { name: "seo", title: "SEO" },
  ],
  fields: [
    {
      name: "seoTitle",
      title: "Title (Open Graph)",
      type: "string",
      group: "seo",
      description:
        "Used for Open Graph previews implemented  by facebook, twitter, google etc.",
    },
    {
      name: "seoDescription",
      title: "Description (Open Graph)",
      type: "string",
      group: "seo",
    },
    {
      name: "seoKeywords",
      type: "array",
      group: "seo",
      options: { layout: "tags" },
      of: [{ name: "keyword", type: "string" }],
    },
    {
      name: "seoShareImage",
      title: "Image (Open Graph)",
      group: "seo",
      description: "1200x630px recommended",
      type: "image",
      options: { hotspot: true },
    },
    {
      type: "object",
      name: "mainSection",
      group: "content",
      fields: [
        { name: "pageTitle", type: "string" },
        {
          type: "array",
          name: "gallery",
          of: [
            {
              name: "slide",
              type: "object",
              fields: [
                {
                  name: "media",
                  type: "object",
                  fields: [
                    {
                      name: "type",
                      title: "Type",
                      type: "string",
                      options: {
                        list: ["image", "video"],
                        layout: "radio",
                        direction: "horizontal",
                      },
                      initialValue: "image",
                      validation: (Rule) => Rule.required(),
                    },
                    {
                      name: "mood",
                      title: "Mood Video",
                      description:
                        "Automatic playback without audio. Videos should be max. 10 seconds long.",
                      type: "file",
                      hidden: ({ parent }) =>
                        (parent === null || parent === void 0
                          ? void 0
                          : parent.type) !== "video",
                    },
                    {
                      name: "player",
                      title: "Video Player",
                      description:
                        "Video Player with all playback controls. If combined with a mood video, the mood video will replace the image poster.",
                      type: "file",
                      hidden: ({ parent }) =>
                        (parent === null || parent === void 0
                          ? void 0
                          : parent.type) !== "video",
                    },
                    {
                      name: "image",
                      type: "image",
                      options: { hotspot: true },
                      hidden: ({ parent }) =>
                        (parent === null || parent === void 0
                          ? void 0
                          : parent.type) !== "image",
                    },
                  ],
                  preview: {
                    select: {
                      type: "type",
                      mood: "mood.asset.playbackId",
                      player: "player.asset.playbackId",
                      image: "image",
                    },
                    prepare: function (args) {
                      if (args.type === "video") {
                        const thumbnail = `https://image.mux.com/${
                          args.mood || args.player
                        }/thumbnail.jpg`;
                        return {
                          title: [
                            args.mood && "Mood Video",
                            args.player && "Video Player",
                          ]
                            .filter(Boolean)
                            .join(" and "),
                        };
                      } else {
                        return {
                          title: "Image",
                          media: args.image,
                        };
                      }
                    },
                  },
                },
                { name: "caption", type: "string" },
              ],
            },
          ],
        },
      ],
    },
    {
      type: "array",
      name: "callToAction",
      of: [
        {
          name: "link",
          type: "object",
          fields: [
            { name: "title", type: "string" },
            { name: "url", type: "url" },
          ],
        },
      ],
      group: "content",
    },
  ],
  preview: {
    select: { title: "mainSection.pageTitle" },
    prepare: function (args) {
      return {
        title: args.title,
      };
    },
  },
};
